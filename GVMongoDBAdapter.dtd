<!--
    MongoDB call operation

        
    #Label: @name
    #Icon: GVMongoDBCall.png
    #Category: DataBase
    #SelectOnInsert    

-->
<!ELEMENT mongodb-call (find|insert|update|delete|findOneAndModify|createIndex)

<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST mongodb-call type CDATA #FIXED "call">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='call' or @type='enqueue' or @type='dequeue']/@name
-->
<!ATTLIST mongodb-call name CDATA #REQUIRED>
<!--
    The resource (MongoDB collection) on which the operations on the db are performed.
    Can contain placeholder to be decoded at runtime.

    #NotNull
-->
<!ATTLIST mongodb-call collection CDATA #REQUIRED>
<!--
    The db name. Can contain placeholder to be decoded at runtime.

    #NotNull
-->
<!ATTLIST mongodb-call database CDATA #REQUIRED>
<!-- 
    The JNDI name of the MongoClientProvider instance
-->
<!ATTLIST mongodb-call client-jndi-name CDATA #IMPLIED>
<!--
    Find operation for MongoDB. Specify at least the search query in the specified configuration child.
    
    #NotNull
-->
<!ELEMENT find (Description?,query,sort?,projection?)>
<!--
    The offset for data results pagination.
    Can contain placeholder to be decoded at runtime.

    #NotNull
-->
<!ATTLIST find offset CDATA #IMPLIED>
<!--
    The limit for data results pagination, the numbero of records shown per page.
    Can contain placeholder to be decoded at runtime.

    #NotNull
-->
<!--
    The limit for data results pagination, the numbero of records shown per page.
    Can contain placeholder to be decoded at runtime.

    #NotNull
-->
<!ATTLIST find limit CDATA #IMPLIED>
<!--
    The MongoDB find query in JSON format.
    Can contain placeholder to be decoded at runtime.
-->
<!ELEMENT query (#PCDATA)>
<!--
    The MongoDB sorting methods in JSON format.
    It must contain a key-value couple for each ordering method retrieved:
    - key: the entity on which you want to sort the data
    - value: can be:
        - 1: for ascending ordering
        - -1: for descending ordering
    Example:
    {
        "name": 1,
        "age": -1
    }
      
    Can contain placeholder to be decoded at runtime.
-->
<!ELEMENT sort (#PCDATA)>
<!--
        The MongoDB data projection expressed in JSON.
-->
<!ELEMENT projection (#PCDATA)>
<!--
    The MongoDB insert data in JSON format.
    Can contain placeholder to be decoded at runtime.
-->
<!ELEMENT insert (#PCDATA)>

<!--
    The MongoDB update data in JSON format.
    Can contain placeholder to be decoded at runtime.
-->
<!ELEMENT update (filter,statement)>
<!--
        Enable/Disable upsert
-->
<!ATTLIST update upsert (true|false) "false">
<!--
        The MongoDB update filter
-->
<!ELEMENT filter (#PCDATA)>

<!--
    The MongoDB findOneAndModify data in JSON format.
    Can contain placeholder to be decoded at runtime.
-->
<!ELEMENT findOneAndModify (filter,statement)>
<!--
        Enable/Disable upsert
-->
<!ATTLIST update upsert (true|false) "false">
<!--
       If true the original document before the modify operation will be returned,
       otherwise the updated document will be returned (default false)
-->
<!ATTLIST findOneAndModify return-original (true|false) "false">

<!--
    The MongoDB delete data in JSON format.
    If no filter is specified, the filter expression will be expected as GVBuffer object in json format
    Can contain placeholder to be decoded at runtime.
-->
<!ELEMENT delete (filter?)>

<!--
        Aggregate operation for MongoDB. Specify at least the JSON formatted search query in the specified configuration child.
    
    #NotNull
-->
<!ELEMENT aggregate (stage+)>
<!--
    The MongoDB  aggregate pipeline stage definition. 
    Can contain placeholder to be decoded at runtime.
-->
<!ELEMENT stage (#PCDATA)>

<!--
    Create indexes in a collection
    
    #NotNull
-->
<!ELEMENT createIndex (keys+)>
<!--
        The MongoDB index definition
    Can contain placeholder to be decoded at runtime.
-->
<!ELEMENT keys (#PCDATA)>

<!--
    MongoDB listcollections call operation

        
    #Label: @name
    #Icon: GVMongoListCollectionsDBCall.png
    #Category: DataBase
    #SelectOnInsert    

-->
<!ELEMENT mongodb-list-collections-call EMPTY>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST mongodb-list-collections-call type CDATA #FIXED "call">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='call' or @type='enqueue' or @type='dequeue']/@name
-->
<!ATTLIST mongodb-list-collections-call name CDATA #REQUIRED>
<!--
    The db name. Can contain placeholder to be decoded at runtime.

    #NotNull
-->
<!ATTLIST mongodb-list-collections-call database CDATA #REQUIRED>

<!--
    Create a user on MongoDB

        
    #Label: @name
    #Icon: GVMongoDBCall.png
    #Category: DataBase
    #SelectOnInsert    

-->
<!ELEMENT mongodb-create-user-call (#PCDATA)>
<!--
    Unmodifiable.
    Used by GreenVulcanoESB factory framework.
-->
<!ATTLIST mongodb-create-user-call type CDATA #FIXED "call">
<!--
    Operation name.
    Used in the 'Flow' section to associate workflow nodes to VCL operations.

    #NotNull
    #Unique: ../*[@type='call' or @type='enqueue' or @type='dequeue']/@name
-->
<!ATTLIST mongodb-create-user-call name CDATA #REQUIRED>
<!--
    The db name. Can contain placeholder to be decoded at runtime.

    #NotNull
-->
<!ATTLIST mongodb-create-user-call database CDATA #REQUIRED>

<!ATTLIST mongodb-create-user-call username CDATA #REQUIRED>

<!ATTLIST mongodb-create-user-call password CDATA #IMPLIED>



<!-- Omitting definition of element statement because is already defined in GVCore dtds 
<!ELEMENT statement (#PCDATA)> -->
